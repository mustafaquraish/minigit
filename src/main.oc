import std::fs
import std::panic
// import std::hash::sha1::{ SHA1Hash }
import std::sv::{ SV }
// import std::zlib
// import std::buffer::{ Buffer }
// import std::bufferio::{ BufferIO }
import std::libc::{ memcpy }
import std::vector::{ Vector }
// import std::set::{ Set }
// import std::map::{ Map }
// import std::sort::{ sort }
// import std::traits::hash::{ hash_bytes }
// import std::time

import @curl
import @core::{
    ObjectType,
    Object,
    StringHash,
    Index,
    IndexEntry
}
import @utils::{
    repo_base_path,
    try_expand_hash,
    get_object_from_hash_str,
    create_blob_object_from_file,
    create_tree_object_from_dir,
    write_object,
    create_commit_object,
    get_index,
    get_repository_status_unstaged,
    object_exists,
    restore_working_directory_from_tree,
    realpath
}

import @pack::{
    PackLineGenerator,
    extract_pkt_lines,
    unpack_all_objects,
}

def shift_args(argc: &i32, argv: &&str): str {
    let arg = (*argv)[0]
    (*argv) = (*argv) + 1
    (*argc) = (*argc) - 1
    return arg
}


/// Git Subcommands

def git_init(program_name: str, argc: i32, argv: &str) {
    if fs::directory_exists(".git") {
        println(`[-] Repository already initialized`)
        return
    }

    fs::create_directory(".git")
    fs::create_directory(".git/objects")
    fs::create_directory(".git/refs")
    fs::create_directory(".git/refs/heads")
    fs::create_directory(".git/refs/tags")
    fs::write_file_str(".git/HEAD", "ref: refs/heads/master\n")

    println(`[+] Initialized empty Git repository`)
}

def git_cat_object(obj: &Object, tree_name_only: bool = false) {
    match obj.type {
        Blob => print(`{obj.u.blob}`)
        Commit => {
            let commit = obj.u.commit
            println(`tree {commit.tree.data}`)
            for parent : commit.parents.iter() {
                println(`parent {parent.data}`)
            }
            println(`author {commit.author} {commit.author_time} {commit.author_tz}`)
            println(`committer {commit.committer} {commit.commit_time} {commit.commit_tz}`)
            println(``)
            println(`{commit.message}`)
        }
        Tree => {
            for entry : obj.u.tree.iter() {
                if tree_name_only {
                    println(`{entry.name}`)
                } else {
                    let type = match entry.mode {
                        16384 => "tree"          // 0o040000
                        33188 | 33261 => "blob"  // 0o100644 | 0o100755
                        40960 => "link"          // 0o120000
                        else => panic(`[-] Unknown mode: {entry.mode}`)
                    }
                    println(`{entry.mode:06o} {type} {entry.hash.data:s}\t{entry.name}`)
                }
            }
        }
        else => panic(`[-] Unknown object type: {obj.type}`)
    }
}

def git_cat_file(program_name: str, argc: i32, argv: &str) {
    if argc < 1 then panic(`[-] Usage: {program_name} cat-file -p <hash>`)

    let arg = shift_args(&argc, &argv)
    match arg {
        "-p" => {
            if argc < 1 then panic(`[-] Missing object hash after '-p'`)
            let hash = try_expand_hash(shift_args(&argc, &argv))
            let obj = get_object_from_hash_str(&hash)
            defer obj.free()
            git_cat_object(&obj)
        }
        else => panic(`[-] Unknown option '{arg}'`)
    }
}

def git_ls_tree(program_name:str, argc: i32, argv: &str) {
    if argc < 1 then panic(`[-] Usage: {program_name} ls-tree [--name-only] <hash>`)
    let arg = shift_args(&argc, &argv)

    let name_only = false
    if arg.eq("--name-only") {
        name_only = true
        if argc < 1 then panic(`[-] Missing object hash after '--name-only'`)
        arg = shift_args(&argc, &argv)
    }

    if arg[0] == '-' {
        panic(`[-] Unknown option '{arg}'`)
    }

    let hash_str = try_expand_hash(arg)
    let obj = get_object_from_hash_str(&hash_str)
    defer obj.free()

    if obj.type != ObjectType::Tree {
        panic(`[-] Object {arg} is not a tree. Don't know how to deal with it`)
    }

    git_cat_object(&obj, tree_name_only: name_only)
}

def git_hash_object(program_name:str, argc: i32, argv: &str) {
    if argc < 1 then panic(`[-] Usage: {program_name} hash-object -w <file>`)

    let arg = shift_args(&argc, &argv)
    match arg {
        "-w" => {
            if argc < 1 then panic(`[-] Missing filename after '-w'`)
            let filename = shift_args(&argc, &argv)
            let obj = create_blob_object_from_file(filename)
            defer obj.free()

            let hash = write_object(&obj)
            println(`{hash.data:s}`)
        }
        else => panic(`[-] Unknown option '{arg}'`)
    }
}

def git_write_tree(program_name: str, argc: i32, argv: &str) {
    let dir = "."
    if argc > 0 then dir = shift_args(&argc, &argv)

    if dir[0] == '-' then panic(`[-] Usage: {program_name} write-tree [directory]`)

    let obj = create_tree_object_from_dir(dir)
    defer obj.free()

    let hash = write_object(&obj)
    println(`{hash.data:s}`)
}

def git_commit_tree(program_name: str, argc: i32, argv: &str) {
    let parent_hashes = Vector<StringHash>::new()
    defer parent_hashes.free()

    let tree_hash_str: str = null
    let message: str = null

    let err_msg = f"[-] Usage: {program_name} commit-tree <tree-hash> -p <parent-hash> -m <message>"
    while argc > 0 {
        let arg = shift_args(&argc, &argv)
        match arg {
            "-p" | "--parent" => {
                if argc < 1 then panic(`[-] Missing parent hash after '-p'\n{err_msg}`)
                let parent_hash = try_expand_hash(shift_args(&argc, &argv))
                parent_hashes.push(parent_hash)
            }
            "-m" | "--message" => {
                if argc < 1 then panic(`[-] Missing message after '-m'\n{err_msg}`)
                if message? then panic(`[-] Multiple message arguments\n{err_msg}`)
                message = shift_args(&argc, &argv)
            }
            else => {
                if tree_hash_str? then panic(`[-] Multiple tree hashes\n{err_msg}`)
                tree_hash_str = arg
            }
        }
    }

    if not tree_hash_str? then panic(`[-] Missing tree hash\n{err_msg}`)
    if not message? then panic(`[-] Missing message\n{err_msg}`)

    let tree_hash = try_expand_hash(tree_hash_str)
    let obj = create_commit_object(&tree_hash, parent_hashes, message)
    defer obj.free()

    let hash = write_object(&obj)
    println(`{hash.data:s}`)
}

def git_ls_files(program_name: str, argc: i32, argv: &str) {
    let show_stage = false
    while argc > 0 {
        let arg = shift_args(&argc, &argv)
        match arg {
            "-s" | "--stage" => show_stage = true
            else => panic(`[-] Unknown option '{arg}'`)
        }
    }

    let index = get_index(".git/index")
    defer index.free()

    let entries = index.sorted_entries()
    defer entries.free()

    for entry : entries.iter() {
        if show_stage {
            let stage = (entry.flags >> 12) & 3
            println(`{entry.modif:06o} {entry.hash.data} {stage}\t{entry.path}`)
        } else {
            println(`{entry.path}`)
        }
    }
}

def git_status(program_name: str, argc: i32, argv: &str) {
    if argc > 0 then panic(`[-] Usage: {program_name} status`)

    let something_changed = false

    let state = get_repository_status_unstaged()
    defer state.free()

    if state.staged_changes.size > 0 {
        something_changed = true
        println(`[+] Changes to be committed:`)
        for change : state.staged_changes.iter() {
            let type_str = change.type.str()
            println(`        \e[0;32m{type_str:8s}:\t{change.path}\e[0m`)
        }
        println("")
    }

    if state.unstaged_changes.size > 0 {
        something_changed = true
        println(`[+] Changes not staged for commit:`)
        for change : state.unstaged_changes.iter() {
            let type_str = change.type.str()
            println(`        \e[0;31m{type_str:8s}: \t{change.path}\e[0m`)
        }
        println("")
    }

    if state.untracked_changes.size > 0 {
        something_changed = true
        println(`[+] Untracked files:`)
        for change : state.untracked_changes.iter() {
            let type_str = change.type.str()
            println(`        \e[0;31m{change.path}\e[0m`)
        }
        println("")
    }

    if not something_changed {
        println(`[+] No changes`)
    }
}

def git_clone(program_name: str, argc: i32, argv: &str) {
    if argc < 1 then panic(`[-] Usage: {program_name} clone <url> [directory]`)
    let url = shift_args(&argc, &argv)
    let directory = "."
    if argc > 0 then directory = shift_args(&argc, &argv)

    let username = std::libc::getenv("GIT_USERNAME")
    let password = std::libc::getenv("GIT_PASSWORD")

    if not username? or not password? {
        panic(`[-] Please set GIT_USERNAME and GIT_PASSWORD environment variables`)
    }

    let receive_pack_url = `{url}/info/refs?service=git-upload-pack`
    let resp = curl::http_request_auth(receive_pack_url, username, password, data: null)

    let lines = extract_pkt_lines(&resp)
    defer lines.free()

    for line : lines.iter() {
        println(`C: {line}`)
    }

    if lines.size < 3 panic(`[-] Invalid response from server: {resp}`)

    assert lines.at(0).eq_str("# service=git-upload-pack"), "Invalid service line"
    assert lines.at(1).eq_str(""), "Invalid flush line"

    let master_hash: StringHash
    let found_master = false

    fs::create_directory(".git")
    fs::create_directory(".git/refs")
    fs::create_directory(".git/refs/heads")
    fs::create_directory(".git/refs/tags")

    for let i = 2; i < lines.size; i++ {
        let line = lines.at(i)
        if line.len == 0 then break

        let first = line.chop_by_delim('\0')
        let hash = first.chop_by_delim(' ')
        let ref = first.chop_by_delim('\n')

        if ref.eq_str("refs/heads/master") {
            memcpy(master_hash.data, hash.data, 40)
            found_master = true
            break
        }
    }

    if not found_master {
        panic(`[-] No master branch found in the remote repository`)
    }

    fs::write_file_str(".git/HEAD", "ref: refs/heads/master\n")
    fs::write_file_str(".git/refs/heads/master", master_hash.data as str)

    println(`[+] Master hash: {master_hash.data}`)

    let gen = PackLineGenerator::make()
    gen.add_line_str(`want {master_hash.data:s}\n`)
    gen.add_line_str(``)
    gen.add_line_str(`done\n`)

    let url2 = `{url}/git-upload-pack`
    println(`[+] Requesting objects from: {url2}`)
    let resp2 = curl::http_request_auth(url2, username, password, data: &gen.data)

    unpack_all_objects(&resp2)

    if not object_exists(&master_hash) {
        panic(`[-] Can't find master commit {master_hash.data} in the received objects`)
    }

    let master_obj = get_object_from_hash_str(&master_hash)
    assert master_obj.type == ObjectType::Commit, "HEAD is not a commit object"

    let tree_hash = master_obj.u.commit.tree
    master_obj.free()

    println(`[+] Tree hash: {tree_hash.data}`)
    restore_working_directory_from_tree(&tree_hash)
}


def main(argc: i32, argv: &str) {
    let program_name = shift_args(&argc, &argv)
    if argc < 1 {
        println(`[-] Usage: {program_name} <sub-command>`)
        std::exit(1)
    }

    repo_base_path = SV::from_str(realpath(".", null))

    let subcmd = shift_args(&argc, &argv)
    match subcmd {
        "init" => git_init(program_name, argc, argv)
        "cat-file" => git_cat_file(program_name, argc, argv)
        "hash-object" => git_hash_object(program_name, argc, argv)
        "ls-tree" => git_ls_tree(program_name, argc, argv)
        "write-tree" => git_write_tree(program_name, argc, argv)
        "commit-tree" => git_commit_tree(program_name, argc, argv)
        "ls-files" => git_ls_files(program_name, argc, argv)
        "status" => git_status(program_name, argc, argv)
        "clone" => git_clone(program_name, argc, argv)
        else => println(`[-] Unknown sub-command '{subcmd}'`)
    }
}
